package gencommands

import (
	"bytes"
	"io/ioutil"
	"net/http"
	"regexp"
	"strings"

	"github.com/bwmarrin/discordgo"
)

// TTS lets you create TTS using a given character from https://15.ai/
func TTS(s *discordgo.Session, m *discordgo.MessageCreate) {
	ttsRegex, _ := regexp.Compile(`(?i)tts\s+(.+)`)

	if !ttsRegex.MatchString(m.Content) {
		s.ChannelMessageSend(m.ChannelID, "Please provide some text to generate TTS for!")
		return
	}

	text := ttsRegex.FindStringSubmatch(m.Content)[1]
	voice := "The Narrator"
	if strings.Contains(text, "-v") {
		split := strings.Split(text, "-v")
		text = strings.TrimSpace(split[0])
		voice = strings.TrimSpace(split[1])
	}

	jsonText := `{"text": "` + text + `", "character": "` + voice + `", "emotion": "Contextual", "use_diagonal": true}`
	data := []byte(jsonText)

	msg, err := s.ChannelMessageSend(m.ChannelID, "Sending message to <https://15.ai/> ...")
	if err != nil {
		return
	}

	req, err := http.NewRequest("POST", "https://api.15.ai/app/getAudioFile", bytes.NewBuffer(data))
	req.Header.Set("Content-Type", "application/json;charset=UTF-8")

	client := &http.Client{}
	res, err := client.Do(req)

	go s.ChannelMessageDelete(m.ChannelID, msg.ID)

	if err != nil {
		s.ChannelMessageSend(m.ChannelID, "An error occured from 15 AI. Make sure you are using a voice that currently exists on the website https://15.ai/")
		return
	}
	defer res.Body.Close()

	b, _ := ioutil.ReadAll(res.Body)
	if len(b) < 1 || b[0] == []byte("{")[0] {
		s.ChannelMessageSend(m.ChannelID, "An error occured with the parameters given to 15 AI. Make sure you are using a voice that currently exists on the website https://15.ai/")
		return
	}
	for {
		b = b[:len(b)-1]
		blen := len(b)
		if b[blen-1] == []byte("[")[0] {
			b = b[:blen-1]
			break
		}
	}

	s.ChannelMessageSendComplex(m.ChannelID, &discordgo.MessageSend{
		Content: "Here is the audio generated by <https://15.ai/>",
		File: &discordgo.File{
			Name:   "tts.wav",
			Reader: bytes.NewReader(b),
		},
	})
	return
}
